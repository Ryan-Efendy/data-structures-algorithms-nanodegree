0. This script runs in O(1) or constant time relative to its input. The input could be 1, 1000 or n, but the script will always takes the same amount of steps.
1. This script runs in O(n + m) where n is the size of texts and m is the size of calls. The worst case is O(n) relative to its input if n > m else is O(m).
2. This script runs in O(n) or linear time relative to its input. We dropped the constant and less signifcant terms: O(n + m) where n is the size of calls and m is the size of the dict containing number telephone number and total time in seconds respectively. 
3. This script runs O(n log n) relative to its input. We dropped the constant and less signifcant terms: O(n + 2m + n log n). Where there are 3 different for loops. (1) iterating through n where n is calls. (2) iterating through m where m is the sorted_codes list and (3) filtering sorted_codes list. The most expensive operation here is sorting which takes n log n. Therefore n log n is the worst case.
4. This script runs O(n log n) relative to its input. We dropped the constant and less signifcant terms: O(n + m + n log n). Where n is calls and m is the sorted_telemarkerters list. The most expensive operation here is sorting which takes n log n. Therefore n log n is the worst case.